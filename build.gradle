description = 'BOL.com Game'

apply plugin: 'java'
// groovy is required for Spock
apply plugin: 'groovy'

ext {
    defaultRunPort = 58080
}

apply from: 'gradle/code-coverage.gradle'
apply from: 'gradle/code-quality.gradle'
apply from: 'gradle/application.gradle'
apply from: 'gradle/heroku.gradle'

sourceCompatibility = targetCompatibility = 1.8

version = '1.0.0'

sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
    test {
        groovy {
            srcDir 'test/groovy'
        }
        java {
            srcDir 'test/java'
        }
    }
}

ext {
    groovyMajorVersion = 2.4
    groovyMinorVersion = 4
    jettyVersion = '9.2.9.v20150224'
}

repositories {
    mavenCentral()
}

dependencies {
    // required dropwizard modules
    ['core', 'views', 'assets'].each { module ->
        compile "io.dropwizard:dropwizard-$module:0.8.4"
    }
    compile "org.eclipse.jetty.websocket:websocket-server:$jettyVersion"
    compile 'com.google.code.findbugs:findbugs:3.0.1'

    testCompile "org.codehaus.groovy:groovy-all:${groovyMajorVersion}.${groovyMinorVersion}"
    testCompile "org.spockframework:spock-core:1.0-groovy-${groovyMajorVersion}"
    testCompile "org.eclipse.jetty.websocket:websocket-client:$jettyVersion"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}

tasks.check.dependsOn 'jacocoTestReport'

task checkCoverage(dependsOn: ['test', 'jacocoTestReport']) {
    description 'Runs all tests and JaCoCo coverage'
    doLast {
        def reports = [test, jacocoTestReport].collect({
            def buildPath = buildDir.path
            def buildDirName = buildPath[buildPath.lastIndexOf(File.separator)..-1]
            '.' + buildDirName + it.reports.html.destination.path - buildPath
        })
        println "\n\tReports are avaialable at ${reports[0]} and ${reports[1]}"
    }
}

// for Ant filter
import org.apache.tools.ant.filters.ReplaceTokens

processResources {
    filter(ReplaceTokens, tokens: [host: "${System.env.HOST ?: "localhost:${runPort()}"}" as String])
}

def runPort() {
    System.env.PORT ?: defaultRunPort
}

